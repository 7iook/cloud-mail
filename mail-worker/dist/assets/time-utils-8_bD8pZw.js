import{a1 as E,aJ as I}from"./index-92mnh-J5.js";import{t as L}from"./index-ChZfA3gH.js";import{a as N}from"./vnode-DfneDD37.js";import{t as h}from"./throttle-BQKBmdXm.js";const T=t=>{let e=0,n=t;for(;n;)e+=n.offsetTop,n=n.offsetParent;return e},O=(t,e)=>Math.abs(T(t)-T(e)),r="ElInfiniteScroll",A=50,_=200,C=0,D={delay:{type:Number,default:_},distance:{type:Number,default:C},disabled:{type:Boolean,default:!1},immediate:{type:Boolean,default:!0}},v=(t,e)=>Object.entries(D).reduce((n,[o,i])=>{var u,s;const{type:f,default:c}=i,a=t.getAttribute(`infinite-scroll-${o}`);let l=(s=(u=e[a])!=null?u:a)!=null?s:c;return l=l==="false"?!1:l,l=f(l),n[o]=Number.isNaN(l)?c:l,n},{}),g=t=>{const{observer:e}=t[r];e&&(e.disconnect(),delete t[r].observer)},F=(t,e)=>{const{container:n,containerEl:o,instance:i,observer:u,lastScrollTop:s}=t[r],{disabled:f,distance:c}=v(t,i),{clientHeight:a,scrollHeight:l,scrollTop:d}=o,S=d-s;if(t[r].lastScrollTop=d,u||f||S<0)return;let b=!1;if(n===t)b=l-(a+d)<=c;else{const{clientTop:y,scrollHeight:w}=t,H=O(t,o);b=d+a>=H+y+w-c}b&&e.call(i)};function p(t,e){const{containerEl:n,instance:o}=t[r],{disabled:i}=v(t,o);i||n.clientHeight===0||(n.scrollHeight<=n.clientHeight?e.call(o):g(t))}const P={async mounted(t,e){const{instance:n,value:o}=e;I(o)||L(r,"'v-infinite-scroll' binding value must be a function"),await E();const{delay:i,immediate:u}=v(t,n),s=N(t,!0),f=s===window?document.documentElement:s,c=h(F.bind(null,t,o),i);if(s){if(t[r]={instance:n,container:s,containerEl:f,delay:i,cb:o,onScroll:c,lastScrollTop:f.scrollTop},u){const a=new MutationObserver(h(p.bind(null,t,o),A));t[r].observer=a,a.observe(t,{childList:!0,subtree:!0}),p(t,o)}s.addEventListener("scroll",c)}},unmounted(t){if(!t[r])return;const{container:e,onScroll:n}=t[r];e?.removeEventListener("scroll",n),g(t)},async updated(t){if(!t[r])await E();else{const{containerEl:e,cb:n,observer:o}=t[r];e.clientHeight&&o&&p(t,n)}}},m=P;m.install=t=>{t.directive("InfiniteScroll",m)};const M=m;function U(t){return new Promise(e=>setTimeout(e,t))}export{M as E,U as s};
